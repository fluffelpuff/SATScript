<pre>
  Title: SATScript Universe / Contract VM (PreWhitePaper)
  Author: 
    Fluffel₿uff
      Twitter: https://twitter.com/fluffelpuffcode
      Nostr: npub14hewvxry7lp6wzec0rzcc6py9qr46seeagkx0c7mkmr3rckex3dq88hzee
  Comments-Summary: Noch in bearbeitung
  Status: Entwurf
</pre>

== Einführung ==

=== Abstrakt ===

Dieses Dokument beschreibt, welche Funktionen die Universen und virtuellen Maschinen in SATScript haben,
es beschreibt, wie Daten geschrieben und gelesen werden und wie eine Absicherung der Daten über mehrere Nodes hinweg erreicht wird.

=== Motivation ===

Es ist ein Versuch zu beweisen, dass Smart Contracts auch auf Bitcoin umsetzbar sind und dass mit einer hoher Funktionalität.
Smart Contracts, die im Hauptlayer ausgeführt/ausgewertet werden, haben aus meiner Sicht nachfolgende Nachteile:
* Durch massenhafte On-Chain Ausführung/Auswertung von Smart Contracts wird der Mempool belastet. Dies führt wiederum zu höheren Gebühren und längeren Wartezeiten bei Transaktionen.
* Die Zensurresistenz einer Blockchain wird verringert, insbesondere die des Vertrags. Die Adresse eines Vertrags kann unter bestimmten Umständen auf eine schwarze Liste gesetzt werden. Dies hätte zur Folge, dass eine Interaktion mit diesem Vertrag nur schwer oder gar nicht mehr möglich wäre.
* Alle Vertragsinteraktionen sind für immer in der Blockchain gespeichert. Das schwächt die Anonymität einzelner Vertragsparteien. Auch wenn die Transparenz einer Blockchain im Hauptlayer unumgänglich für ihre Sicherheit ist, kann es für einzelne Nutzer Probleme geben, wenn jeder ihre Vertragsinteraktionen nachvollziehen kann.
* Es müssen X-mal mehr Daten auf der Blockchain gespeichert werden, was zu einer Zentralisierung führen kann. Auch wenn das Speichern immer günstiger wird, sind Terabytes auf Handys und Co. noch kein Standard. Selbst dann stellt sich die Frage: "Muss alles für immer On-Chain gespeichert werden?"
* Nachdem ein Vertrag auf der Blockchain initialisiert wurde, kann dieser nicht mehr verändert werden. Auf der einen Seite ist das eine Kerneigenschaft einer Blockchain und unumgänglich für den Betrieb einer Blockchain. Der Code des Vertrags ist für immer in der Blockchain gespeichert. Auch dann, wenn der Vertrag von niemandem mehr verwendet wird, bleibt er für immer online. Bei Ethereum erhält ein Vertrag oft einen Eigentümer, der in der Lage ist, den "dezentralen" Smart Contract zu stoppen. Dies hat bei einem fehlerhaften Vertrag zwar den Vorteil, dass neue Nutzer geschützt werden können, da eine Interaktion mit dem Vertrag nicht mehr möglich ist. Es stellt jedoch die Dezentralität des Smart Contracts in Frage, wenn zentrale Stellen in der Lage sind, einen "dezentralen" Vertrag aufzuhalten. Deshalb stellt sich die Frage: "Ist es unbedingt notwendig, einen Smart Contract auf einer Blockchain zu speichern?"


Die Ausführung eines Smart Contracts ist mit der Ausführung eines normalen Programms oder einer App vergleichbar, mit dem Unterschied, dass jede Operation durch kryptographische (und andere) Funktionen so zusammengefasst wird, dass jeder auf der Blockchain prüfen kann, ob der Contract korrekt ausgeführt wurde und die Ausgabe der Funktion korrekt ist. Diese Eigenschaft nennt man auch Determinismus, bei gleicher Eingabe muss die gleiche Ausgabe herauskommen. Lightning hat demonstriert, dass Transaktionen auch im Second Layer übertragen werden können. Nun stellt sich die Frage, ob es mit dem Lightning-Konzept möglich ist, Smart Contracts zwischen zwei oder eventuell auch mehreren Teilnehmern auszuführen, ohne dass der Contract auf einer Blockchain initialisiert werden muss.

=== Beschreibung ===

SATScript ist ein Container-basiertes P2P-Smart-Contract-System, bei dem Smart Contracts auf einem Gerät installiert werden und nicht in einer Blockchain gespeichert sind. Über eine RPC-Schnittstelle können die exportierten Contract-Funktionen aufgerufen oder Variablen ausgelesen werden. Um einen Contract verwenden zu können, muss dieser zunächst installiert werden. Nach der Installation wird ein Container benötigt, der Informationen darüber enthält, welche Smart Contracts innerhalb des Containers verfügbar sind, sowie wer die Wallet und die Wertedatenbank des Containers verwaltet. Nehmen wir an das Alice und Bob einen Wett Smart Contract ausführen wollen, hierfür benötigen Alice und Bob jeweils den gleichen Smart Contract und einen Container welcher die Nostr Adresse sowie den Öffentlichen Wallet Public Key der Gegenseite enthält.


Nachdem Alice und Bob den Container gestartet haben, versucht dieser automatisch eine Synchronisation herzustellen, indem er den Zustand des Containers der Gegenseite mit seinem eigenen vergleicht. Wenn Alice den Container startet, fragt er den aktuellen Zustand des Containers bei Bob ab. Wenn es der erste Start des Containers ist, informiert Bob den Node von Alice, dass keine Daten verfügbar sind. Dieser Schritt wird von Alice und Bob parallel beim Verbindungsaufbau ausgeführt. Um sicherzustellen, dass der Zustand von beiden Seiten akzeptiert wurde, muss eine Signatur aller Container-Teilnehmer vorhanden sein. Sollte Alice oder Bob einen neueren Zustand des Containers haben, so wird dieser an die Gegenseite übermittelt.


Sobald die Container auf den aktuellen Zustand synchronisiert wurden, werden alle für den Container bereitgestellten Smart Contracts aktiviert, wodurch sie nun verwendet werden können. Damit Alice und Bob die einzelnen Contracts innerhalb des Containers verwenden können, müssen sie zuerst einen PegIn durchführen. Angenommen Alice möchte einen PegIn vorgang in den Container durchführen, hierfür führt sie in der Console den folgenden befehl aus:
<source lang="php">
cli pegin <VM(Container)-ID / VM-Name> <Account-Addresse>
</source>
Nachdem Alice den Befehl ausgeführt hat, wird eine Einzahlungsadresse erstellt, die auf die von ihr angegebene VM-Account-Adresse verweist. Diese Adresse wird zurückgegeben, und Alice kann nun ihre Satoshis oder Bitcoins auf diese erstellte Bitcoin-Adresse einzahlen. Damit eine Transaktion erkannt wird, sind mindestens sechs Bestätigungen erforderlich. Sobald die Einzahlungstransaktion erkannt wurde, wird der Betrag an Satoshis / Bitcoins auf der Account-Adresse gutgeschrieben. Der Node, der die Einzahlung zuerst erkennt, signalisiert allen anderen Nodes, dass eine neue Einzahlung erfolgt ist. Anschließend wartet er auf die Bestätigung der Einzahlung durch die anderen Nodes, die den Container verwalten und ausführen. Sobald die Einzahlung von allen teilnehmenden Container-Nodes erkannt wurde, kann Alice die Satoshis innerhalb des Containers an jede Account-Adresse senden oder sie an jeden im Container verfügbaren Contract senden. Container speichern keine Transaktionshistorie ab. Es ist immer nur der aktuelle Zustand verfügbar, vorherige Zustände werden sofort gelöscht, nachdem sie verändert wurden. Somit sind Transaktionen innerhalb eines Containers sehr privat. Um innerhalb eines Containers eine Transaktion durchführen zu können, muss man kein verwaltendes Mitglied des Containers sein. Jeder kann, sofern der Container nichts anderes bestimmt hat, eine Transaktion innerhalb eines Containers durchführen. Angenommen Alice möchte Charlie Satoshis innerhalb des Containers senden, dann benötigt sie die Account-Adresse von Charlie. Alice erstellt die Transaktion, signiert diese mit ihrem privaten Schlüssel und übermittelt die Transaktion dann an den Container, der von ihrem Node ausgeführt wird. Der Container überprüft, ob Alice über den Betrag verfügt und ob die Signatur der Transaktion korrekt ist. Nachdem die Prüfung der Transaktion abgeschlossen wurde, wird die Transaktion an alle verwaltenden Container-Nodes übermittelt und auf Bestätigung gewartet.